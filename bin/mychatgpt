#!/bin/bash

# Function to display help
show_help() {
    echo "Usage: $0 [options] <user_message>"
    echo
    echo "This script sends a chat message to the OpenAI API and retrieves a response."
    echo
    echo "Options:"
    echo "  -d, --debug          Enable debug mode to show the curl request"
    echo "  -p, --prompt <file>  Use a custom system prompt from the specified file"
    echo "  -m, --model <model>  Specify the model to use (default: o3-mini)"
    echo "  --help               Display this help message and exit"
}

# Check if OPENAI_API_KEY is set
if [ -z "$OPENAI_API_KEY" ]; then
  echo "Error: OPENAI_API_KEY is not set."
  exit 1
fi

# Initialize variables
DEBUG=false
SYSTEM_PROMPT="You are a helpful assistant."
MODEL="o3-mini"
CHUNKING_LINES=1000

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--debug)
      DEBUG=true
      shift
      ;;
    -p|--prompt)
      if [ -f "$2" ]; then
        SYSTEM_PROMPT=$(<"$2")
        shift 2
      else
        echo "Error: File $2 not found."
        exit 1
      fi
      ;;
    -m|--model)
      MODEL="$2"
      shift 2
      ;;
    --help)
      show_help
      exit 0
      ;;
    *)
      USER_MESSAGE="$1"
      shift
      ;;
  esac
done

# Read user message from argument or standard input
if [ -z "$USER_MESSAGE" ]; then
  USER_MESSAGE=$(cat)
fi

# Split the user message into chunks of 1000 lines
TEMP_FILE=$(mktemp)
echo "$USER_MESSAGE" > "$TEMP_FILE"
split -l $CHUNKING_LINES "$TEMP_FILE" "${TEMP_FILE}_chunk_"

# Start constructing the JSON payload
JSON_PAYLOAD=$(jq -n --arg model "$MODEL" --arg system_prompt "$SYSTEM_PROMPT" '{
  model: $model,
  messages: [
    {
      role: "user",
      content: $system_prompt
    }
  ]
}')

# Add each chunk as a separate user message
for chunk in "${TEMP_FILE}_chunk_"*; do
  CHUNK_CONTENT=$(<"$chunk")
  JSON_PAYLOAD=$(echo "$JSON_PAYLOAD" | jq --arg content "$CHUNK_CONTENT" '.messages += [{"role": "user", "content": $content}]')
done

# Write the JSON payload to a temporary file
JSON_FILE=$(mktemp)
echo "$JSON_PAYLOAD" > "$JSON_FILE"

# Remove the temporary files
rm "$TEMP_FILE" "${TEMP_FILE}_chunk_"*

# Check if JSON_PAYLOAD is empty
if [ ! -s "$JSON_FILE" ]; then
  echo "Error: JSON payload is empty."
  rm "$JSON_FILE"
  exit 1
fi

# Show the curl request if in debug mode
if [ "$DEBUG" = true ]; then
  echo "curl -s -w \"%{http_code}\" \"https://api.openai.com/v1/chat/completions\" \\"
  echo "  -H \"Content-Type: application/json"\" \\
  echo "  -H \"Authorization: Bearer \$OPENAI_API_KEY\" \\"
  echo "  --data-binary @$JSON_FILE"
fi

# Make the API request and capture the response and HTTP status code
RESPONSE=$(curl -s -w "%{http_code}" -o response.json "https://api.openai.com/v1/chat/completions" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  --data-binary @"$JSON_FILE")

# Extract the HTTP status code
HTTP_STATUS="${RESPONSE: -3}"

# Check for errors based on the HTTP status code
if [[ "$HTTP_STATUS" -ne 200 ]]; then
  echo "Error: API request failed with status code $HTTP_STATUS"
  echo "Response:"
  cat response.json
  rm "$JSON_FILE"
  exit 1
fi

# Process the successful response with jq
cat response.json | jq -r '.choices[0].message.content, "Token Used: \(.usage.total_tokens)"'

# Clean up
rm response.json "$JSON_FILE"
