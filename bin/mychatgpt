#!/bin/bash

# Check if OPENAI_API_KEY is set
if [ -z "$OPENAI_API_KEY" ]; then
  echo "Error: OPENAI_API_KEY is not set."
  exit 1
fi

# Initialize variables
DEBUG=false
SYSTEM_PROMPT="You are a helpful assistant."

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--debug)
      DEBUG=true
      shift
      ;;
    -p|--prompt)
      if [ -f "$2" ]; then
        SYSTEM_PROMPT=$(<"$2")
        shift 2
      else
        echo "Error: File $2 not found."
        exit 1
      fi
      ;;
    *)
      USER_MESSAGE="$1"
      shift
      ;;
  esac
done

# Read user message from argument or standard input
if [ -z "$USER_MESSAGE" ]; then
  USER_MESSAGE=$(cat)
fi

# Prepare the JSON payload using jq for proper encoding
JSON_PAYLOAD=$(jq -n --arg system_prompt "$SYSTEM_PROMPT" --arg user_message "$USER_MESSAGE" '{
  model: "gpt-4o",
  messages: [
    {
      role: "developer",
      content: $system_prompt
    },
    {
      role: "user",
      content: $user_message
    }
  ]
}')

# Show the curl request if in debug mode
if [ "$DEBUG" = true ]; then
  echo "curl -s -w \"%{http_code}\" \"https://api.openai.com/v1/chat/completions\" \\"
  echo "  -H \"Content-Type: application/json\" \\"
  echo "  -H \"Authorization: Bearer \$OPENAI_API_KEY\" \\"
  echo "  -d '$JSON_PAYLOAD'"
fi

# Make the API request and capture the response and HTTP status code
RESPONSE=$(curl -s -w "%{http_code}" -o response.json "https://api.openai.com/v1/chat/completions" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d "$JSON_PAYLOAD")

# Extract the HTTP status code
HTTP_STATUS="${RESPONSE: -3}"

# Check for errors based on the HTTP status code
if [[ "$HTTP_STATUS" -ne 200 ]]; then
  echo "Error: API request failed with status code $HTTP_STATUS"
  echo "Response:"
  cat response.json
  exit 1
fi

# Process the successful response with jq
cat response.json | jq -r '.choices[0].message.content, "Token Used: \(.usage.total_tokens)"'

# Clean up
rm response.json
